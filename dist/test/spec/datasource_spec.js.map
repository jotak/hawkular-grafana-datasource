{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","hProtocol","hHostname","hPort","hPath","instanceSettings","url","jsonData","tenant","beforeEach","$q","backendSrv","datasourceRequest","request","when","data","ds","it","done","query","targets","then","result","expect","to","have","property","with","length","err","options","range","from","target","type","rate","method","equal","headers","parser","document","createElement","href","pathElements","pathname","split","filter","e","slice","deep","be","oneOf","start","end","ids","timestamp","value","map","t","include","members","datapoints"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('GenericDatasource', function () {\n  var ctx = {};\n  var hProtocol = 'https';\n  var hHostname = 'test.com';\n  var hPort = '876';\n  var hPath = 'hawkular/metrics';\n  var instanceSettings = {\n    url: hProtocol + '://' + hHostname + ':' + hPort + '/' + hPath,\n    jsonData: {\n      tenant: 'test-tenant'\n    }\n  };\n\n  beforeEach(function () {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = function (request) {\n      return ctx.$q.when({data: {'Implementation-Version': '1.0.0'}})\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv);\n  });\n\n  it('should return an empty array when no targets are set', function (done) {\n    ctx.ds.query({targets: []}).then(function (result) {\n      expect(result).to.have.property('data').with.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return the server results when a target is set', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        target: 'memory',\n        type: 'gauge',\n        rate: false\n      }, {\n        target: 'packets',\n        type: 'counter',\n        rate: true\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n\n      expect(request.method).to.equal('POST');\n      expect(request.headers).to.have.property('Hawkular-Tenant', instanceSettings.jsonData.tenant);\n\n      var parser = document.createElement('a');\n      parser.href = request.url;\n\n      expect(parser).to.have.property('protocol', hProtocol + ':');\n      expect(parser).to.have.property('hostname', hHostname);\n      expect(parser).to.have.property('port', hPort);\n      expect(parser).to.have.property('pathname');\n\n      var pathElements = parser.pathname.split('/').filter(e => e.length != 0);\n\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements[2]).to.be.oneOf(['gauges', 'counters']);\n      if (pathElements[2] == 'gauges') {\n        expect(pathElements.slice(3)).to.deep.equal(['raw', 'query']);\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: ['memory']\n        });\n      } else {\n        expect(pathElements.slice(3)).to.deep.equal(['rate', 'query']);\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: ['packets']\n        });\n      }\n\n      return ctx.$q.when({\n        data: [{\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['memory', 'packets']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}