{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","hProtocol","hHostname","hPort","hPath","instanceSettings","url","jsonData","tenant","parsePathElements","expect","request","method","to","equal","headers","have","property","parser","document","createElement","href","pathname","split","filter","e","length","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","query","targets","then","result","with","done","err","options","range","from","id","type","rate","pathElements","slice","deep","be","oneOf","start","end","ids","order","status","timestamp","value","map","t","include","members","datapoints","variables","name","string","tags","seriesAggFn","timeAggFn","buckets","stacked","min","max","avg","limit","annotation","annotationQuery","time","title","undefined","text","suggestTags","suggestTagKeys"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('HawkularDatasource', () => {\n  let ctx = {};\n  let hProtocol = 'https';\n  let hHostname = 'test.com';\n  let hPort = '876';\n  let hPath = 'hawkular/metrics';\n  let instanceSettings = {\n    url: hProtocol + '://' + hHostname + ':' + hPort + '/' + hPath,\n    jsonData: {\n      tenant: 'test-tenant'\n    }\n  };\n\n  let parsePathElements = request => {\n    expect(request.method).to.equal('POST');\n    expect(request.headers).to.have.property('Hawkular-Tenant', instanceSettings.jsonData.tenant);\n\n    let parser = document.createElement('a');\n    parser.href = request.url;\n\n    expect(parser).to.have.property('protocol', hProtocol + ':');\n    expect(parser).to.have.property('hostname', hHostname);\n    expect(parser).to.have.property('port', hPort);\n    expect(parser).to.have.property('pathname');\n\n    return parser.pathname.split('/').filter(e => e.length != 0);\n  }\n\n  beforeEach(() => {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = request => {\n      return ctx.$q.when({data: {'Implementation-Version': '0.22.0'}})\n    };\n    ctx.templateSrv = {\n      replace: (target, vars) => target\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should return an empty array when no targets are set', done => {\n    ctx.ds.query({targets: []}).then(result => {\n      expect(result).to.have.property('data').with.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return the server results when a target is set', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: 'memory',\n        type: 'gauge',\n        rate: false\n      }, {\n        id: 'packets',\n        type: 'counter',\n        rate: true\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      let id = pathElements[2] == 'gauges' ? 'memory' : 'packets';\n\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements[2]).to.be.oneOf(['gauges', 'counters']);\n      if (pathElements[2] == 'gauges') {\n        expect(pathElements.slice(3)).to.deep.equal(['raw', 'query']);\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: [id],\n          order: 'ASC'\n        });\n      } else {\n        expect(pathElements.slice(3)).to.deep.equal(['rate', 'query']);\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: [id],\n          order: 'ASC'\n        });\n      }\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: id,\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['memory', 'packets']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return multiple results with templated target', done => {\n\n    const options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: '$app/memory',\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.templateSrv.variables = [{\n      name: 'app'\n    }];\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$app');\n      return \"{app_1,app_2}\";\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expect(request.url).to.have.string(\"/gauges/raw/query\");\n      expect(request.data.ids).to.include.members(['app_1/memory', 'app_2/memory']);\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"app_1/memory\",\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        },{\n          id: \"app_2/memory\",\n          data: [{\n            timestamp: 13,\n            value: 28\n          }, {\n            timestamp: 19,\n            value: 32\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['app_1/memory', 'app_2/memory']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[28, 13], [32, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query by tags', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        tags: [\n          {name: 'type', value: 'memory'},\n          {name: 'host', value: 'myhost'}\n        ],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: \"type:memory,host:myhost\",\n        order: 'ASC'\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myhost.metric.memory.1\",\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        },{\n          id: \"myhost.metric.memory.2\",\n          data: [{\n            timestamp: 13,\n            value: 20\n          }, {\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['myhost.metric.memory.1', 'myhost.metric.memory.2']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[20, 13], [25, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return aggregated stats max/stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'max',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'stats', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: \"type:memory\",\n        buckets: 1,\n        stacked: true\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 13,\n          end: 19,\n          min: 35,\n          max: 46,\n          avg: 40.5\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[46, 13]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return aggregated stats avg/not stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'avg',\n        timeAggFn: 'avg',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'stats', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: \"type:memory\",\n        buckets: 1,\n        stacked: false\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 13,\n          end: 19,\n          min: 15,\n          max: 25,\n          avg: 20.25\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[20.25, 13]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'live',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal(\"type:memory\");\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myhost.metric.memory.1\",\n          data: [{\n            timestamp: 18,\n            value: 21\n          }]\n        },{\n          id: \"myhost.metric.memory.2\",\n          data: [{\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[46, 18]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats not stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'avg',\n        timeAggFn: 'live',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal(\"type:memory\");\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myhost.metric.memory.1\",\n          data: [{\n            timestamp: 18,\n            value: 21\n          }]\n        },{\n          id: \"myhost.metric.memory.2\",\n          data: [{\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[23, 18]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query availability', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: 'myapp/health',\n        type: 'availability'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['availability', 'raw', 'query']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myapp/health\",\n          data: [{\n            timestamp: 13,\n            value: 'up'\n          }, {\n            timestamp: 19,\n            value: 'down'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].target).to.equal('myapp/health');\n      expect(result.data[0].datapoints).to.deep.equal([[1, 13], [0, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations without tags', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: \"my.timeline\",\n        name: \"Timeline\"\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['strings', 'raw', 'query']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"my.timeline\",\n          data: [{\n            timestamp: 13,\n            value: 'start'\n          }, {\n            timestamp: 19,\n            value: 'stop'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal(\"Timeline\");\n      expect(result[0].tags).to.be.undefined;\n      expect(result[0].text).to.equal(\"start\");\n\n      expect(result[1].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal(\"Timeline\");\n      expect(result[1].tags).to.be.undefined;\n      expect(result[1].text).to.equal(\"stop\");\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations with tags', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: \"my.timeline\",\n        name: \"Timeline\"\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['strings', 'raw', 'query']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"my.timeline\",\n          data: [{\n            timestamp: 13,\n            value: 'start',\n            tags: {\n              'item': 'myItem',\n              'step': 'start'\n            }\n          }, {\n            timestamp: 19,\n            value: 'stop',\n            tags: {\n              'item': 'myItem',\n              'step': 'stop'\n            }\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal(\"Timeline\");\n      expect(result[0].tags).to.equal(\"myItem start\");\n      expect(result[0].text).to.equal(\"start\");\n\n      expect(result[1].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal(\"Timeline\");\n      expect(result[1].tags).to.equal(\"myItem stop\");\n      expect(result[1].text).to.equal(\"stop\");\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get tags suggestions', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      let parser = document.createElement('a');\n      parser.href = request.url;\n      const pathElements = parser.pathname.split('/').filter(e => e.length != 0);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'tags', 'host:*']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: {\n          'host': ['cartago', 'rio']\n        }\n      });\n    };\n\n    ctx.ds.suggestTags('gauge', 'host').then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'cartago', value: 'cartago' });\n      expect(result[1]).to.deep.equal({ text: 'rio', value: 'rio' });\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get no suggestions on unknown tag', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      let parser = document.createElement('a');\n      parser.href = request.url;\n      const pathElements = parser.pathname.split('/').filter(e => e.length != 0);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'tags', 'host:*']);\n      return ctx.$q.when({\n        status: 204,\n        data: {}\n      });\n    };\n    ctx.ds.suggestTags('gauge', 'host').then(result => {\n      expect(result).to.have.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get tag keys suggestions', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      let parser = document.createElement('a');\n      parser.href = request.url;\n      const pathElements = parser.pathname.split('/').filter(e => e.length != 0);\n      expect(pathElements).to.have.length(4);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['metrics', 'tags']);\n      return ctx.$q.when({\n        status: 200,\n        data: ['host', 'app']\n      });\n    };\n\n    ctx.ds.suggestTagKeys().then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'host', value: 'host' });\n      expect(result[1]).to.deep.equal({ text: 'app', value: 'app' });\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should resolve variables in annotations', done => {\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: \"$who.timeline\",\n        name: \"Timeline\"\n      }\n    };\n\n    ctx.templateSrv.variables = [{\n      name: 'who'\n    }];\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$who');\n      return \"{your,my}\";\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      const pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['strings', 'raw', 'query']);\n      expect(request.data.ids).to.deep.equal(['your.timeline', 'my.timeline']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"your.timeline\",\n          data: [{\n            timestamp: 15,\n            value: 'start'\n          }]\n        },{\n          id: \"my.timeline\",\n          data: [{\n            timestamp: 13,\n            value: 'start'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: \"$who.timeline\", name: \"Timeline\" });\n      expect(result[0].time).to.equal(15);\n      expect(result[0].title).to.equal(\"Timeline\");\n      expect(result[0].tags).to.equal('your.timeline');\n      expect(result[0].text).to.equal(\"start\");\n\n      expect(result[1].annotation).to.deep.equal({ query: \"$who.timeline\", name: \"Timeline\" });\n      expect(result[1].time).to.equal(13);\n      expect(result[1].title).to.equal(\"Timeline\");\n      expect(result[1].tags).to.equal('my.timeline');\n      expect(result[1].text).to.equal(\"start\");\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}